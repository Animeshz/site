import{_ as a,c as t,a as e,b as n,t as o,d as l,o as i}from"./app.5adf5193.js";const g=JSON.parse(`{"title":"Demystifying UEFI","description":"Easily understand everything you're missing about UEFI","frontmatter":{"title":"Demystifying UEFI","description":"Easily understand everything you're missing about UEFI","created":"2023-05-09 5:01 PM","tags":["uefi","demystifying"]},"headers":[{"level":2,"title":"Fundamentals about computers","slug":"fundamentals-about-computers","link":"#fundamentals-about-computers","children":[]},{"level":2,"title":"The *.efi file","slug":"the-efi-file","link":"#the-efi-file","children":[]}],"relativePath":"blogs/demystifying-uefi.md"}`),r={name:"blogs/demystifying-uefi.md"},p={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),y=l(`<hr><p><strong>Today</strong> I did something really cool. Has this ever happened to you? After a long time, errors seem to go away and <em>everything starts working again</em>. Its such a nice feeling.</p><p>As an occassional low-level programming enjoyer, it feels really nice to work with something that you use everyday but are unaware of how it really works under the hood.</p><p>Let me show it by example, <em>sqaure root</em>, a simple thing right? How does it look in code, more simply how do you calculate it except just hit n trial? Computer does it in a deterministic way. Although I needed atleast 25-30 jump-to-definitions in Java&#39;s source code to find out how it actually worked. And simplified, its as simple as:</p><div class="language-cpp line-numbers-mode"><button class="copy"></button><span class="lang">cpp</span><pre><code><span class="line"><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sqrt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;">  // TBH anything, really, except 0 ofc.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    a </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">a </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> n</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">return</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>What the \u0192\u03C5\xA2\u043A? Weren&#39;t we trying to calculate n to the power of 1/2? Really we do, but we can write the equation of power 1/2 in linear form (power 1). Now for those interested in how does this work, refer <a href="https://en.wikipedia.org/wiki/Newton%27s_method#Description" target="_blank" rel="noreferrer">Newton&#39;s Method</a>, its really simple.</p><p>The point is, exploring 25-30 definition jumps was worth it in the end!</p><p><em>UEFI</em> is quite similar too, its something that we use every single day, yet we&#39;re mostly unaware of how it works, and hence the curious boy will do everything to unravel the mystery.</p><h2 id="fundamentals-about-computers" tabindex="-1">Fundamentals about computers <a class="header-anchor" href="#fundamentals-about-computers" aria-hidden="true">#</a></h2><p>I recently saw a video <a href="https://youtu.be/ZSSNFkEMv24" target="_blank" rel="noreferrer">What is voltage? (joke video)</a> posted on the April fools day, questioning why did it take you 5 years to fully understand the voltage. Its really funny one, I&#39;d encourage you to check it out. Its really feels daunting when society makes it difficult, by telling partial-statements and incrementally correct it out with time while not telling the most obvious truth.</p><p>It may seem a bit <em>boring</em>, maybe. But the way we want to start demystifying UEFI is by looking at the most obvious truth about computers.</p><p>That computers are made up of little switches (also known as transistors). When we press the power button, we let some electricity flow into the BIOS/CMOS chip for a short duration of time. These chips generally contains an EPROM (Erasable Programmable Read-Only Memory) which is flashed with something called as a firmware-descriptor (fd) through some equipments externally.</p><p>With a small flow of electricity, the firmware-descriptor present (which also contians the UEFI screen you see by pressing f2/f10 at the boot time), in the chip starts the booting sequence, by opening some gate and activating DRAM, then CPU then rest of the components.</p><p>Once the RAM and the CPU is functional for the first time, it scans all the vFAT partitions in the connected drives and start looking for <code>/EFI/*/*.efi</code> files. Once it finds one, it tries to launch and give full hardware control to it.</p><h2 id="the-efi-file" tabindex="-1">The *.efi file <a class="header-anchor" href="#the-efi-file" aria-hidden="true">#</a></h2><p>This one&#39;s really <em>interesting</em>. When your computer has just started off, it knows nothing about what to do, and this is the first file that tells it what to do.</p><p>In contrast, the *.efi file is just a simple binary, with some specific restrictions imposed, that is listed in the <a href="https://uefi.org/sites/default/files/resources/UEFI%20Spec%202.8B%20May%202020.pdf" target="_blank" rel="noreferrer">UEFI Specification</a>:</p><ul><li>EFI binary format is PE32+, not the usual ELF (generated by default options in gcc/clang, in Unix-like operating systems).</li><li>EFI Code is expected to use Microsoft ABI, and be position independent (PI) as there&#39;s no guarentee that it&#39;ll be loaded at fixed address.</li></ul><p>For instance,</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">$ file /boot/efi/EFI/void_grub/grubx64.efi</span></span>
<span class="line"><span style="color:#A6ACCD;">/boot/efi/EFI/void_grub/grubx64.efi: PE32+ executable </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">EFI application</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> x86-64 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">stripped to external PDB</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">for</span><span style="color:#A6ACCD;"> MS Windows, 4 sections</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>With this out of the way, we know that we need to build a Microsoft targeting binary. Fortunately the LLVM/Clang projects supports doing exactly that without making a mess of cross-compilers as in GNU compilers (gcc).</p><p><strong><em>TODO</em></strong></p>`,22);function d(s,h,u,m,f,F){return i(),t("div",null,[e("h1",p,[n(o(s.$frontmatter.title)+" ",1),c]),y])}const b=a(r,[["render",d]]);export{g as __pageData,b as default};
