import{_ as n,c as a,a as e,t as o,d as t,o as i}from"./app.5f87b248.js";const y=JSON.parse('{"title":"Random Stuffs","description":"","frontmatter":{"title":"Random Stuffs","slug":"linux-random"},"headers":[{"level":2,"title":"Process Monitoring (/usr/bin/time)","slug":"process-monitoring-usr-bin-time","link":"#process-monitoring-usr-bin-time","children":[]},{"level":2,"title":"Advertising Linux as a Audio Sinking Device","slug":"advertising-linux-as-a-audio-sinking-device","link":"#advertising-linux-as-a-audio-sinking-device","children":[]},{"level":2,"title":"Running & Chrooting into cross-architecutre binaries","slug":"running-chrooting-into-cross-architecutre-binaries","link":"#running-chrooting-into-cross-architecutre-binaries","children":[]}],"relativePath":"notes/linux/linux-random-stuffs.md"}'),r={name:"notes/linux/linux-random-stuffs.md"},l=t(`<h2 id="process-monitoring-usr-bin-time" tabindex="-1">Process Monitoring (/usr/bin/time) <a class="header-anchor" href="#process-monitoring-usr-bin-time" aria-hidden="true">#</a></h2><p><code>time</code> is a shell builtin which measures time taken by a process to complete its execution, its implementation depends on type of shell you&#39;re using.</p><p>We&#39;re <strong>not talking about that time</strong> here, we&#39;re talking about literally <code>/usr/bin/time</code> command (binary). It can be invoked as:</p><ul><li><code>/usr/bin/time &lt;cmd&gt;</code></li><li><code>eval $(which time) &lt;cmd&gt;</code></li><li><code>command time &lt;cmd&gt;</code></li></ul><p>in order to skip any time builtin present in the shell and run the possibly hidden time command in the system.</p><p>Its a very useful resource monitor. In the man page, its general format is described as:</p><div class="language-ruby line-numbers-mode"><button class="copy"></button><span class="lang">ruby</span><pre><code><span class="line"><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Uuser </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Ssystem </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Eelapsed </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">PCPU </span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">Xtext</span><span style="color:#89DDFF;">+%</span><span style="color:#A6ACCD;">Ddata </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Mmax</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">k</span></span>
<span class="line"><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Iinputs</span><span style="color:#89DDFF;">+%</span><span style="color:#A6ACCD;">Ooutputs </span><span style="color:#89DDFF;">(%</span><span style="color:#A6ACCD;">Fmajor</span><span style="color:#89DDFF;">+%</span><span style="color:#A6ACCD;">Rminor</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">pagefaults </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">Wswaps</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>It looks very cryptic, but what it really is:</p><div class="language- line-numbers-mode"><button class="copy"></button><span class="lang"></span><pre><code><span class="line"><span style="color:#A6ACCD;">TIME CPU (MEMORY_USAGE)</span></span>
<span class="line"><span style="color:#A6ACCD;">I/O (DISK_ACCESS + SHARED_MEMORY_ACCESS) DISK_WRITE_AS_MEMORY</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>There&#39;s a <a href="https://scoutapm.com/blog/understanding-page-faults-and-memory-swap-in-outs-when-should-you-worry" target="_blank" rel="noreferrer">very good article explaining PageFaults &amp; Swaps</a>, in case you want to read more about them.</p><h2 id="advertising-linux-as-a-audio-sinking-device" tabindex="-1">Advertising Linux as a Audio Sinking Device <a class="header-anchor" href="#advertising-linux-as-a-audio-sinking-device" aria-hidden="true">#</a></h2><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">bluetoothctl</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;"># power on</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;"># advertise.name FW</span></span>
<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;"># advertise on</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># A few yes here</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Note that these commands donot work from outside (in non-interactive mode).</p><h2 id="running-chrooting-into-cross-architecutre-binaries" tabindex="-1">Running &amp; Chrooting into cross-architecutre binaries <a class="header-anchor" href="#running-chrooting-into-cross-architecutre-binaries" aria-hidden="true">#</a></h2><p>Install <code>qemu-user-static</code> and run <a href="https://github.com/Animeshz/scripts/tree/main/main/qemu-binfmt" target="_blank" rel="noreferrer">this script</a> as superuser:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">sudo qemu-binfmt --register</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><em>Note: This script needs to be ran again after every reboot, so making it run at startup is recommended.</em></p>`,17);function p(s,c,u,d,m,b){return i(),a("div",null,[e("h1",null,o(s.$frontmatter.title),1),l])}const g=n(r,[["render",p]]);export{y as __pageData,g as default};
