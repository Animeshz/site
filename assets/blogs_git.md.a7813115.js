import{_ as a,c as e,a as s,b as l,t,d as o,o as r}from"./app.998db073.js";const p="/site/assets/cover.5b644913.jpg",D=JSON.parse(`{"title":"Learn Git - The easy way","description":"The first and last article you'll ever need to master git","frontmatter":{"title":"Learn Git - The easy way","description":"The first and last article you'll ever need to master git","created":"2022-09-27 3:10 AM","tags":["git","version-control"],"head":[["meta",{"name":"robots","content":"max-image-preview:large"}]]},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[]},{"level":2,"title":"Get Started","slug":"get-started","link":"#get-started","children":[{"level":3,"title":"Create/Clone a git repository","slug":"create-clone-a-git-repository","link":"#create-clone-a-git-repository","children":[]},{"level":3,"title":"Your First Commit","slug":"your-first-commit","link":"#your-first-commit","children":[]}]},{"level":2,"title":"Concept of Remotes","slug":"concept-of-remotes","link":"#concept-of-remotes","children":[{"level":3,"title":"Hosting to Github/Gitlab","slug":"hosting-to-github-gitlab","link":"#hosting-to-github-gitlab","children":[]},{"level":3,"title":"Hosting to local path","slug":"hosting-to-local-path","link":"#hosting-to-local-path","children":[]},{"level":3,"title":"Pushing Changes","slug":"pushing-changes","link":"#pushing-changes","children":[]}]},{"level":2,"title":"Contributing to Others Repository","slug":"contributing-to-others-repository","link":"#contributing-to-others-repository","children":[{"level":3,"title":"Forks","slug":"forks","link":"#forks","children":[]},{"level":3,"title":"Pull","slug":"pull","link":"#pull","children":[]},{"level":3,"title":"Branches","slug":"branches","link":"#branches","children":[]},{"level":3,"title":"Merge","slug":"merge","link":"#merge","children":[]},{"level":3,"title":"PR/MR","slug":"pr-mr","link":"#pr-mr","children":[]},{"level":3,"title":"Issues","slug":"issues","link":"#issues","children":[]}]},{"level":2,"title":"Other Useful Stuffs","slug":"other-useful-stuffs","link":"#other-useful-stuffs","children":[{"level":3,"title":"Diff","slug":"diff","link":"#diff","children":[]},{"level":3,"title":"Shallow Clone","slug":"shallow-clone","link":"#shallow-clone","children":[]},{"level":3,"title":"Reverting","slug":"reverting","link":"#reverting","children":[]},{"level":3,"title":"Rebase (Chance to edit commits)","slug":"rebase-chance-to-edit-commits","link":"#rebase-chance-to-edit-commits","children":[]},{"level":3,"title":"RefLog","slug":"reflog","link":"#reflog","children":[]},{"level":3,"title":"Stash","slug":"stash","link":"#stash","children":[]}]}],"relativePath":"blogs/git.md"}`),i={name:"blogs/git.md"},c={id:"frontmatter-title",tabindex:"-1"},u=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-hidden":"true"},"#",-1),h=o('<p>Git is a robust tool, to manage your complex to complex workflows. It was primarily made for managing the Linux Kernel (by Linus Torvalds itself) which today recieves and accepts over 8.5 changes/hour.</p><p>There are various use-cases of git:</p><ul><li>It helps you to parallely work on different parts of a single project.</li><li>Stop working on one feature for a bit, work on another and resume later, etc.</li><li>Keep history of a software safe, revert to any point if needed.</li></ul><p>and many more.</p><p><img src="'+p+`" alt="Cover Image"></p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><p>On Unix systems (Linux/Mac) git should most probably be pre-installed, on Windows follow the <a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">installation-instructions</a>.</p><p>Once installed, open your favourite terminal, and run:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --global user.name </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">your-name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git config --global user.email </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">your-email</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># should match the one in your github/gitlab</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>You don&#39;t need to have github/gitlab account yet, just make sure to put the email that you&#39;d be using for github/gitlab.</p><h2 id="get-started" tabindex="-1">Get Started <a class="header-anchor" href="#get-started" aria-hidden="true">#</a></h2><h3 id="create-clone-a-git-repository" tabindex="-1">Create/Clone a git repository <a class="header-anchor" href="#create-clone-a-git-repository" aria-hidden="true">#</a></h3><p>Now open your favourite terminal in any directory (possibly empty), and run:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># Creates a new repository</span></span>
<span class="line"><span style="color:#A6ACCD;">git init</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># Clone an existing repository from web</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone https://github.com/Animeshz/site </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> site</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>This will initialize a git repository, namely a <code>.git</code> folder would&#39;ve created in that directory.</p><h3 id="your-first-commit" tabindex="-1">Your First Commit <a class="header-anchor" href="#your-first-commit" aria-hidden="true">#</a></h3><p>Commits record changes in a git repository.</p><p>Create any file and write anything. And now run:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git status  </span><span style="color:#676E95;"># you should see that it reports you created a new file</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">My First Commit</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git log     </span><span style="color:#676E95;"># yay! you committed for the first time</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>This creates a commit in the repository you just initialized a moment earlier.</p><h2 id="concept-of-remotes" tabindex="-1">Concept of Remotes <a class="header-anchor" href="#concept-of-remotes" aria-hidden="true">#</a></h2><p>A git repository, can be moved to/from any other locations, just as you see above that you can clone repository over https.</p><p>A <strong>remote</strong> is simply any path or url, you wish to publish your repostitory to.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git remote                          </span><span style="color:#676E95;"># lists all remotes</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">path-or-url</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;"># adds a remote</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote remove </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;"># removes a remote</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># misc stuffs</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote get-url </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote set-url </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">path-or-url</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>If you&#39;ve cloned a repository you would automatically have a remote named <code>origin</code> added up pointing to the url you used to clone the repository.</p><h3 id="hosting-to-github-gitlab" tabindex="-1">Hosting to Github/Gitlab <a class="header-anchor" href="#hosting-to-github-gitlab" aria-hidden="true">#</a></h3><p><a href="https://github.com" target="_blank" rel="noreferrer">Github</a> and <a href="https://gitlab.com" target="_blank" rel="noreferrer">Gitlab</a> are two <strong>most popular free-to-use git repository</strong> hosting services. To host your repository there, simply create a free account and head over to <a href="https://github.com/new" target="_blank" rel="noreferrer">github.com/new</a> or <a href="https://gitlab.com/projects/new" target="_blank" rel="noreferrer">gitlab.com/projects/new</a> to create your repository.</p><p>These services have stopped authentication using passwords, so in order to push something you also have to create either <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token" target="_blank" rel="noreferrer">Personal Access Token (PAT)</a> or <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh" target="_blank" rel="noreferrer">SSH Key</a>. Creating a SSH key is quite overwhelming initially, so I&#39;d recommend creating a PAT.</p><p>Then add a remote to the repository url:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># PAT</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add origin https://</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">PAT</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">@github.com/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># SSH</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add origin https://github.com/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="hosting-to-local-path" tabindex="-1">Hosting to local path <a class="header-anchor" href="#hosting-to-local-path" aria-hidden="true">#</a></h3><p>You don&#39;t need Github/Gitlab to keep your work safe, <strong>for instance if you work to freelance/privately</strong> you can still use git and keep your changes safe in a HDD.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> /path/to/HDD </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> mkdir repo-destination </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> repo-destination</span></span>
<span class="line"><span style="color:#A6ACCD;">git init --bare</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> /path/to/your/repo</span></span>
<span class="line"><span style="color:#A6ACCD;">git remote add origin /path/to/HDD/repo-destination</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="pushing-changes" tabindex="-1">Pushing Changes <a class="header-anchor" href="#pushing-changes" aria-hidden="true">#</a></h3><p>Now you&#39;d be able to push your commits by running:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git push</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><strong>Note:</strong> You may need to run <code>git push -u origin main</code> in case you&#39;re pushing for the first time.</p><h2 id="contributing-to-others-repository" tabindex="-1">Contributing to Others Repository <a class="header-anchor" href="#contributing-to-others-repository" aria-hidden="true">#</a></h2><h3 id="forks" tabindex="-1">Forks <a class="header-anchor" href="#forks" aria-hidden="true">#</a></h3><p>Used to create a copy of repository in your account within github/gitlab.</p><p>There&#39;s a fork button in top of repository, tap to fork it! <strong>You can only make changes in your account. If you want to contribute to others, you&#39;d need to first fork it to your account make changes and then send a PR.</strong></p><p><img src="https://docs.github.com/assets/cb-23088/images/help/repository/fork_button.png" alt="Fork Btn"></p><h3 id="pull" tabindex="-1">Pull <a class="header-anchor" href="#pull" aria-hidden="true">#</a></h3><p>Used to update local repository to sync with any remote.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git remote add upstream </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">fork\\&#39;s original url</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git pull upstream main</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>Note:</strong> If you already made some changes in your local copy of repository you may need to run <code>git pull --rebase upstream main</code> instead.</p><h3 id="branches" tabindex="-1">Branches <a class="header-anchor" href="#branches" aria-hidden="true">#</a></h3><p>Used to work on different parts of the project parallely.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git branch    </span><span style="color:#676E95;"># list out all branches in current repository</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout -b </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># creates and switches to branch &lt;name&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;"># switches to branch &lt;name&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>main</code> is the name of default branch, and you were working on the main branch since then. (Few years ago default was <code>master</code>)</p><div class="tip custom-block"><p class="custom-block-title">ProTip</p><p>Appending <code>/network</code> to any repository hosted on github previews commit-movement over branches. For example, <a href="https://github.com/elkowar/eww/network" target="_blank" rel="noreferrer">https://github.com/elkowar/eww/network</a>.</p></div><h3 id="merge" tabindex="-1">Merge <a class="header-anchor" href="#merge" aria-hidden="true">#</a></h3><p>Used to merge one branch into another (done by project maintainers).</p><p>Parallel work are merged into one by using merge!</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># pulls the changes from &lt;branch-name&gt; and merge into current branch</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">branch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git merge </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">remote</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">branch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>MergeConflicts:</strong> Refer to the <a href="https://git-scm.com/book/en/v2/Git-Tools-Advanced-Merging" target="_blank" rel="noreferrer">Advanced Merging</a> to know about it, or understand how to resolve it.</p><h3 id="pr-mr" tabindex="-1">PR/MR <a class="header-anchor" href="#pr-mr" aria-hidden="true">#</a></h3><p>PullRequest (AKA MergeRequest) are used to make the upstream project maintainer know that you&#39;re trying to contribute to his/her repository. He/She may accept your PR/MR, ask more changes, or reject it.</p><p>To create a PR, head over to github/gitlab&#39;s upstream repository, append <code>/pulls</code> to the url and click <code>New pull request</code></p><h3 id="issues" tabindex="-1">Issues <a class="header-anchor" href="#issues" aria-hidden="true">#</a></h3><p>Generally look for issues, or create them first if you see any undesired behavior in the project or any potential feature is missing. Then try to solve them and send a PR. Issues are present in any repository by appending <code>/issues</code> at the url.</p><h2 id="other-useful-stuffs" tabindex="-1">Other Useful Stuffs <a class="header-anchor" href="#other-useful-stuffs" aria-hidden="true">#</a></h2><h3 id="diff" tabindex="-1">Diff <a class="header-anchor" href="#diff" aria-hidden="true">#</a></h3><p>Git&#39;s diff uses <a href="https://en.wikipedia.org/wiki/Diff#Unified_format" target="_blank" rel="noreferrer">Unix&#39;s Unified Diff Format</a> and are very useful to <strong>review your changes before committing</strong>.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git diff</span></span>
<span class="line"><span style="color:#A6ACCD;">git diff --staged  </span><span style="color:#676E95;"># if you ran &#39;git add .&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="shallow-clone" tabindex="-1">Shallow Clone <a class="header-anchor" href="#shallow-clone" aria-hidden="true">#</a></h3><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># Clones only the latest 1 commit from the repository</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone --depth=1 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># Unshallow (in case you need full history later)</span></span>
<span class="line"><span style="color:#A6ACCD;">git fetch --unshallow</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="reverting" tabindex="-1">Reverting <a class="header-anchor" href="#reverting" aria-hidden="true">#</a></h3><p>You can revert to any commit in the past by:</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#676E95;"># Checkout commit leaving current branch in detached state</span></span>
<span class="line"><span style="color:#A6ACCD;">git checkout </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">commit-hash</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># Reset current branch to &lt;commit-hash&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset --soft </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">commit-hash</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">git reset --hard </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">commit-hash</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;"># overwrites untracked files too, riskier</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>A commit-hash look like <code>6b1328c</code> can be viewed using <code>git log</code>, and alternatively <code>HEAD~2</code> is fancy way of referring to 3rd last commit in current branch.</p><p><strong>Note: You don&#39;t need to know this if you know rebase (below).</strong></p><h3 id="rebase-chance-to-edit-commits" tabindex="-1">Rebase (Chance to edit commits) <a class="header-anchor" href="#rebase-chance-to-edit-commits" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">Description</p><p>Ever happened you created commit at wrong stage, or named the commit wrong, or anything like that? Rebase is at your rescue.</p></div><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git config --global core.editor code  </span><span style="color:#676E95;"># set default editor to vscode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git rebase -i HEAD~n   </span><span style="color:#676E95;"># n is number of commits you wanna open editor for</span></span>
<span class="line"><span style="color:#A6ACCD;">git rebase -i --root   </span><span style="color:#676E95;"># edit every single commit from root of the branch</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Your preferred editor should pop up with the following looking contents:</p><div class="language-git-rebase line-numbers-mode"><button class="copy"></button><span class="lang">git-rebase</span><pre><code><span class="line"><span style="color:#82AAFF;">pick</span><span style="color:#A6ACCD;"> 611ca3b Changes 1</span></span>
<span class="line"><span style="color:#82AAFF;">pick</span><span style="color:#A6ACCD;"> c399eb9 Changes 2</span></span>
<span class="line"><span style="color:#82AAFF;">pick</span><span style="color:#A6ACCD;"> 76e2269 Changes 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># Rebase 5c7e4cf..76e2269 onto 5c7e4cf (3 commands)</span></span>
<span class="line"><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#676E95;"># Commands:</span></span>
<span class="line"><span style="color:#676E95;"># p, pick &lt;commit&gt; = use commit</span></span>
<span class="line"><span style="color:#676E95;"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span>
<span class="line"><span style="color:#676E95;"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span>
<span class="line"><span style="color:#676E95;"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span>
<span class="line"><span style="color:#676E95;"># f, fixup [-C | -c] &lt;commit&gt; = like &quot;squash&quot; but keep only the previous</span></span>
<span class="line"><span style="color:#676E95;">#                    commit&#39;s log message, unless -C is used, in which case</span></span>
<span class="line"><span style="color:#676E95;">#                    keep only this commit&#39;s message; -c is same as -C but</span></span>
<span class="line"><span style="color:#676E95;">#                    opens the editor</span></span>
<span class="line"><span style="color:#676E95;"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span>
<span class="line"><span style="color:#676E95;"># b, break = stop here (continue rebase later with &#39;git rebase --continue&#39;)</span></span>
<span class="line"><span style="color:#676E95;"># d, drop &lt;commit&gt; = remove commit</span></span>
<span class="line"><span style="color:#676E95;"># l, label &lt;label&gt; = label current HEAD with a name</span></span>
<span class="line"><span style="color:#676E95;"># t, reset &lt;label&gt; = reset HEAD to a label</span></span>
<span class="line"><span style="color:#676E95;"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span>
<span class="line"><span style="color:#676E95;"># .       create a merge commit using the original merge commit&#39;s</span></span>
<span class="line"><span style="color:#676E95;"># .       message (or the oneline, if no original merge commit was</span></span>
<span class="line"><span style="color:#676E95;"># .       specified); use -c &lt;commit&gt; to reword the commit message</span></span>
<span class="line"><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#676E95;"># These lines can be re-ordered; they are executed from top to bottom.</span></span>
<span class="line"><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#676E95;"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span>
<span class="line"><span style="color:#676E95;">#</span></span>
<span class="line"><span style="color:#676E95;"># However, if you remove everything, the rebase will be aborted.\`\`</span></span>
<span class="line"><span style="color:#676E95;">#</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>You can move the lines up/down to change the order of commit, or delete them to remove the commit from middle of the repository.</p><p>You can change the command (one letter as well as full-name is accepted), from <code>pick</code> to anything as listed. They&#39;re self-explainatory there.</p><h3 id="reflog" tabindex="-1">RefLog <a class="header-anchor" href="#reflog" aria-hidden="true">#</a></h3><p>Like <code>git log</code> but also shows every incident when the tip of the branch (HEAD) is changed (from rebase/pull/merge/etc). Useful to revert any risky operations which changed commit-history.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git reflog show</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p><strong>ProTip:</strong> From the collected hash (looking like <code>5c7e4cf</code>) you can view the changes in that commit using: <code>git show 5c7e4cf</code>.</p><h3 id="stash" tabindex="-1">Stash <a class="header-anchor" href="#stash" aria-hidden="true">#</a></h3><p>Another very useful feature of git is to stash your work temporarily, start working on other stuffs, and then come-back to where you were.</p><div class="language-bash line-numbers-mode"><button class="copy"></button><span class="lang">bash</span><pre><code><span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash push -m </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">My first stash</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;"># work-tree should now be reset to last commit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">git stash list</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash pop 0     </span><span style="color:#676E95;"># apply and removes latest (0th) stash</span></span>
<span class="line"><span style="color:#A6ACCD;">git stash apply 0   </span><span style="color:#676E95;"># applies but doesn&#39;t remove latest (0th) stash</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,86);function d(n,m,b,g,y,f){return r(),e("div",null,[s("h1",c,[l(t(n.$frontmatter.title)+" ",1),u]),h])}const C=a(i,[["render",d]]);export{D as __pageData,C as default};
