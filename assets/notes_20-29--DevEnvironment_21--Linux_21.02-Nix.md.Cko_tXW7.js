import{_ as a,c as s,e as n,o as l}from"./chunks/framework.BIeOwSkr.js";const m=JSON.parse('{"title":"21.02 Nix","description":"","frontmatter":{},"headers":[],"relativePath":"notes/20-29--DevEnvironment/21--Linux/21.02-Nix.md","filePath":"notes/20-29--DevEnvironment/21--Linux/21.02-Nix.md","lastUpdated":1727013011000}'),t={name:"notes/20-29--DevEnvironment/21--Linux/21.02-Nix.md"};function o(r,e,i,p,c,h){return l(),s("div",null,e[0]||(e[0]=[n(`<h1 id="_21-02-nix" tabindex="-1">21.02 Nix <a class="header-anchor" href="#_21-02-nix" aria-label="Permalink to &quot;21.02 Nix&quot;">â€‹</a></h1><blockquote><p><em>my code is possible if people want it ðŸ˜ƒ the real value of NixOS is hardware and OS config can be turned into libraries! (<a href="https://news.ycombinator.com/item?id=28900008" target="_blank" rel="noreferrer">HN</a>)</em></p></blockquote><p><a href="https://nixos.org/" target="_blank" rel="noreferrer">The nix</a> is <a href="https://edolstra.github.io/pubs/phd-thesis.pdf" target="_blank" rel="noreferrer">a package management system</a> that enforces isolation and can work as a secondary package manager for any Linux without any risk.</p><p>It enforces <a href="https://nixos.wiki/wiki/NixOS_modules" target="_blank" rel="noreferrer">everything is text</a>, allowing easy switching of configurations with zero-efforts and zero-misconfigurations, formally defined as <a href="https://www.thecodedmessage.com/posts/reproducibility/" target="_blank" rel="noreferrer">reproducibility</a>.</p><p>With nix its impossible to have partially installed applications (<a href="https://medium.com/scientific-breakthrough-of-the-afternoon/closure-vs-derivation-in-the-nix-package-manager-ec0eccc53407" target="_blank" rel="noreferrer">closure</a>). It makes <a href="https://yuanwang.ca/posts/getting-started-with-flakes.html" target="_blank" rel="noreferrer">development environment too easy</a>, cross-compilation is as easy as choosing an attribute to build.</p><h2 id="basic-terminology" tabindex="-1">Basic terminology <a class="header-anchor" href="#basic-terminology" aria-label="Permalink to &quot;Basic terminology&quot;">â€‹</a></h2><p>The term &#39;nix&#39; can refer to multiple things and documentation around is very <em>chaotic</em>, that&#39;s why basic terminology is essential:</p><ul><li><p>Nix in general refers to <a href="https://nixos.org/manual/nix/stable/introduction.html" target="_blank" rel="noreferrer">a purely functional package manager</a>, that came in 2003 along with the <a href="https://edolstra.github.io/pubs/phd-thesis.pdf" target="_blank" rel="noreferrer">PhD Thesis by Eelco Dolstra</a>.</p></li><li><p><a href="https://nixos.wiki/wiki/Overview_of_the_Nix_Language" target="_blank" rel="noreferrer">Nix langauge</a> is a DSL for writing system or home configuration, used directly by nix package manager.</p></li><li><p><a href="https://nixos.org/" target="_blank" rel="noreferrer">NixOS</a> is an OS built around nix as its only package manager which came later in 2007, nix <em>can be used outside NixOS</em>, and that&#39;s how I use it.</p></li><li><p><a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noreferrer">nixpkgs</a> (<a href="https://search.nixos.org/" target="_blank" rel="noreferrer">search</a>) is world&#39;s largest and freshest package repository known till date with over 80k packages.</p></li><li><p><a href="https://cache.nixos.org" target="_blank" rel="noreferrer">https://cache.nixos.org</a> is pre-built binary cache on top of nixpkgs, which stores all the versions of all the packages known till date, <a href="https://discourse.nixos.org/t/nixos-foundations-financial-summary-a-transparent-look-into-2022/28107/16" target="_blank" rel="noreferrer">425TiB in total as of May 2023</a>.</p></li><li><p><a href="https://nixos-and-flakes.thiscute.world/nixos-with-flakes/introduction-to-flakes" target="_blank" rel="noreferrer">Flakes</a> is an experimental feature of nix. This enables version pinning and making modules completely pure.</p></li></ul><p><a href="https://jvns.ca/blog/2023/03/03/how-do-nix-builds-work-/" target="_blank" rel="noreferrer">This article by Julia Evans</a> and all the links it leads to, are great starting point for anybody new to nix.</p><h2 id="important-projects-features" tabindex="-1">Important projects / features <a class="header-anchor" href="#important-projects-features" aria-label="Permalink to &quot;Important projects / features&quot;">â€‹</a></h2><h3 id="_1-home-manager" tabindex="-1">1. Home Manager <a class="header-anchor" href="#_1-home-manager" aria-label="Permalink to &quot;1. Home Manager&quot;">â€‹</a></h3><p><a href="https://github.com/nix-community/home-manager" target="_blank" rel="noreferrer">nix-community/home-manager</a> is a part of nix-community github org that provides various &quot;Nix Modules&quot; for installing &amp; configuring user-level programs.</p><p><a href="/site/blogs/chasing-productivity-1.html#the-nix-s-module-system">Nix Module System</a> is really interesting, <a href="https://github.com/ryantm/evalModules" target="_blank" rel="noreferrer">NixCon 2023 - Why choose Nix for configuration?</a> dives deep into it.</p><h3 id="_2-comma" tabindex="-1">2. Comma <a class="header-anchor" href="#_2-comma" aria-label="Permalink to &quot;2. Comma&quot;">â€‹</a></h3><p><a href="https://github.com/nix-community/comma" target="_blank" rel="noreferrer">nix-community/comma</a> allows running binaries transiently/ephemerally, What if I don&#39;t have neofetch?</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ,</span><span style="color:#C3E88D;"> neofetch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>And that&#39;s it, I don&#39;t need to search the package that provides that binary, nor I have to install it, just run it!</p><h3 id="_3-devshells" tabindex="-1">3. DevShells <a class="header-anchor" href="#_3-devshells" aria-label="Permalink to &quot;3. DevShells&quot;">â€‹</a></h3><p>The <a href="https://github.com/numtide/devshell/" target="_blank" rel="noreferrer">numtide/devshell</a> helps one to quickly bootstrap a project&#39;s build environment just by running <code>nix develop</code>.</p><p>The <a href="https://numtide.github.io/devshell/intro.html" target="_blank" rel="noreferrer">devshell docs</a> are really good, as well as <a href="https://yuanwang.ca/posts/getting-started-with-flakes.html" target="_blank" rel="noreferrer">this article</a>.</p><p>Their statement is</p><blockquote><p>It should not take more than 10 minutes from the time you clone a repo and can start contributing.</p></blockquote><p>It prepares the shell with all the build dependencies, the environmental variables, the services (e.g. development database), and provides a handy menu for common commands for the newcomers to the project.</p><h3 id="_4-snowfalllib" tabindex="-1">4. SnowfallLib <a class="header-anchor" href="#_4-snowfalllib" aria-label="Permalink to &quot;4. SnowfallLib&quot;">â€‹</a></h3><p>This <a href="https://github.com/snowfallorg/lib" target="_blank" rel="noreferrer">snowfallorg/lib</a> is a support library for giving a file structure to system/home configuration based flakes (NixOS, home-manager, and nix-darwin).</p><p>I personally prefer it to elliminate boilerplate in <code>flake.nix</code> at root of project.</p><h2 id="links" tabindex="-1">Links <a class="header-anchor" href="#links" aria-label="Permalink to &quot;Links&quot;">â€‹</a></h2><ul><li><a href="https://nixos-and-flakes.thiscute.world/preface" target="_blank" rel="noreferrer">NixOS and Flakes book</a> - A really good community-maintained book.</li><li><a href="https://www.zombiezen.com/blog/2023/03/connecting-bash-to-nix/" target="_blank" rel="noreferrer">Connecting Bash to Nix</a> - A really good bottom-up (low-level) article.</li><li><a href="https://zero-to-nix.com/" target="_blank" rel="noreferrer">Zero to Nix by DeterminateSystems</a> - Learn nix interactively.</li><li><a href="https://teu5us.github.io/nix-lib.html" target="_blank" rel="noreferrer">Nix std-lib and nixpkgs-lib docs in one place</a>.</li><li><a href="https://noogle.dev/" target="_blank" rel="noreferrer">noogle.dev</a> - Google for nix library functions.</li><li><a href="https://github.com/nix-community/awesome-nix" target="_blank" rel="noreferrer">nix-community/awesome-nix</a>.</li><li><a href="https://nixos.wiki/wiki/Comparison_of_secret_managing_schemes" target="_blank" rel="noreferrer">Secret management schemes</a>.</li><li><a href="http://www.chriswarbo.net/projects/nixos/useful_hacks.html" target="_blank" rel="noreferrer">Ancient collection of useful nix hacks</a>.</li><li><a href="https://www.youtube.com/playlist?list=PLyzwHTVJlRc8yjlx4VR4LU5A5O44og9in" target="_blank" rel="noreferrer">Nix Hour by Tweag (YT)</a> - A series going deep into nix.</li><li><a href="https://www.youtube.com/@NixCon/videos" target="_blank" rel="noreferrer">NixCon 2023 (YT)</a> - Talks on recent development and community projects.</li><li><a href="https://r13y.com/" target="_blank" rel="noreferrer">r13y.com</a> - How much % of NixOS is reproducible?</li><li><a href="https://wiki.nikiv.dev/package-managers/nix/" target="_blank" rel="noreferrer">Nix by wiki.nikiv.dev</a> - More nix resources.</li><li><a href="https://nixos.wiki/wiki/Configuration_Collection" target="_blank" rel="noreferrer">Public NixOS configs on nixos.wiki</a> and also <a href="https://nixos.wiki/wiki/Comparison_of_NixOS_setups" target="_blank" rel="noreferrer">a few with comparision</a>.</li><li><a href="https://github.com/rasendubi/dotfiles" target="_blank" rel="noreferrer">rasendubi/dotfiles</a> - A really extensive NixOS config.</li><li><a href="https://github.com/NixOS/rfcs/" target="_blank" rel="noreferrer">NixOS/rfcs</a> - big changes on Nix or NixOS are tracked here.</li><li><a href="https://edolstra.github.io/talks/build-systems-nov-2019.pdf" target="_blank" rel="noreferrer">Build Systems Nov 2019 - Eelco Dolstra</a> - Slides.</li></ul><h3 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">â€‹</a></h3><ul><li><a href="https://discord.com/invite/RbvHtGa" target="_blank" rel="noreferrer">Nix/NixOS Discord (unofficial)</a> - A community of really fast and helpful people.</li><li><a href="https://github.com/NixOS/patchelf" target="_blank" rel="noreferrer">NixOS/patchelf</a> - A binary patcher for modifying lookup paths of existing ELF binary.</li><li><a href="https://tvix.dev/" target="_blank" rel="noreferrer">Tvix</a> (<a href="https://news.ycombinator.com/item?id=29412971" target="_blank" rel="noreferrer">HN</a>) - A new nix implementation in rust, <a href="https://tvixbolt.tvl.su/" target="_blank" rel="noreferrer">tvixbolt</a> online interpreter is good for AST, Bytecode, Runtime Trace, and Output analysis of nix code.</li><li><a href="https://github.com/cleverca22/not-os" target="_blank" rel="noreferrer">not-os</a> and <a href="https://github.com/ZilchOS/core" target="_blank" rel="noreferrer">ZilchOS</a> and <a href="https://github.com/nix-community/NixNG" target="_blank" rel="noreferrer">NixNG</a>.</li><li><a href="https://github.com/nix-community/NUR" target="_blank" rel="noreferrer">NUR</a> - Nix User Repository, equivalent of Arch&#39;s AUR, any PR will be immediately merged without any checks.</li><li><a href="https://guix.gnu.org/" target="_blank" rel="noreferrer">Guix</a> - similar goals to nix, except enforces only free softwares. It is toxic to people mentioning nix in thier irc channels.</li><li><a href="https://www.gobolinux.org/" target="_blank" rel="noreferrer">GoboLinux</a> (<a href="https://news.ycombinator.com/item?id=26002251" target="_blank" rel="noreferrer">HN</a>) - is an alternative Linux distribution which redefines the entire filesystem hierarchy.</li><li><a href="https://github.com/distr1/distri" target="_blank" rel="noreferrer">Distri</a> - A linux distro to search fast package management.</li></ul><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">â€‹</a></h2><h3 id="_1-config-dump" tabindex="-1">1. Config Dump <a class="header-anchor" href="#_1-config-dump" aria-label="Permalink to &quot;1. Config Dump&quot;">â€‹</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> show-config</span><span style="color:#676E95;font-style:italic;">  # Shows dump of $XDG_CONFIG_HOME/nix/nix.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-hm-cleanup-older-generations" tabindex="-1">2. [HM] Cleanup older generations <a class="header-anchor" href="#_2-hm-cleanup-older-generations" aria-label="Permalink to &quot;2. [HM] Cleanup older generations&quot;">â€‹</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#BABED8;">pushd </span><span style="color:#89DDFF;">~</span><span style="color:#BABED8;">/.local/state/nix/profiles </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#FFCB6B;"> ls</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> awk</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">!/</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">readlink</span><span style="color:#C3E88D;"> home-manager</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/ &amp;&amp; /home-manager-/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> xargs</span><span style="color:#C3E88D;"> rm</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> popd</span></span>
<span class="line"><span style="color:#FFCB6B;">nix-collect-garbage</span><span style="color:#C3E88D;"> --delete-old</span></span>
<span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> store</span><span style="color:#C3E88D;"> gc</span><span style="color:#C3E88D;"> --debug</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Sometimes if a file is opened in any process it refuses to clean it up, rebooting and cleaning again may help.</p><h3 id="_3-cross-compilation" tabindex="-1">3. Cross Compilation <a class="header-anchor" href="#_3-cross-compilation" aria-label="Permalink to &quot;3. Cross Compilation&quot;">â€‹</a></h3><p>Cross compilation is as easy as to expose package in a flake output or apply an overlay on nixpkgs and then choose flake path to build.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Custom Flake</span></span>
<span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> build</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">.#packages.x86_64-linux.pkgsCross.mingwW64.my_pkg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Pkg from nixpkgs, or your package overlayed on nixpkgs</span></span>
<span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> build</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">nixpkgs#pkgsCross.mingwW64.my_pkg</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>[TODO] Expand on this into an article as this is not very well shown in any article AFAIK.</p><h3 id="_4-ephemeral-shell-scoped-install" tabindex="-1">4. Ephemeral shell-scoped install <a class="header-anchor" href="#_4-ephemeral-shell-scoped-install" aria-label="Permalink to &quot;4. Ephemeral shell-scoped install&quot;">â€‹</a></h3><p>Examples:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">nix-shell</span><span style="color:#C3E88D;"> -p</span><span style="color:#C3E88D;"> hello</span></span>
<span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> shell</span><span style="color:#C3E88D;"> nixpkgs#hello</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">nix-shell</span><span style="color:#C3E88D;"> -p</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">python3.withPackages(pp: [ packages.numpy ])</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> --pure</span></span>
<span class="line"><span style="color:#FFCB6B;">nix</span><span style="color:#C3E88D;"> develop</span><span style="color:#C3E88D;"> --impure</span><span style="color:#C3E88D;"> --expr</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">with import &lt;nixpkgs&gt; {}; mkShell { buildInputs = [ python3.withPackages(pp: [ packages.numpy ]) ]; }</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Misc info:</p><ol><li><code>nix-shell -p</code> and <code>nix shell</code> are alike.</li><li><code>nix-shell</code> and <code>nix develop</code> are alike, with no argument former works with <code>shell.nix</code> latter works with <code>outputs.devShells.default</code> definition in <code>flake.nix</code>.</li><li>The <code>nix-shell</code> invokes stdenv, whereas <code>nix shell</code> doesn&#39;t.</li></ol><h3 id="_5-pining-flake-inputs" tabindex="-1">5. Pining flake inputs <a class="header-anchor" href="#_5-pining-flake-inputs" aria-label="Permalink to &quot;5. Pining flake inputs&quot;">â€‹</a></h3><p>Its good to have consistent system with <em>single nixpkgs pin</em> across all the commands, and to <em>not garbage-collect</em> any of the flake inputs, atleast until the profile is activated.</p><div class="language-nix line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nix</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">{</span><span style="color:#BABED8;font-style:italic;"> inputs</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ... }:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  nix</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">registry</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">nixpkgs</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">flake</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;font-style:italic;"> inputs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;font-style:italic;">nixpkgs</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">                  # pin for new command syntax</span></span>
<span class="line"><span style="color:#C792EA;">  home</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">sessionVariables</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">NIX_PATH</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">nixpkgs=</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;font-style:italic;">inputs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;font-style:italic;">nixpkgs</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # pin for old-command syntax</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # prevent &#39;all&#39; the flake inputs from being garbage-collected until this profile is activated</span></span>
<span class="line"><span style="color:#C792EA;">  xdg</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">configFile</span><span style="color:#BABED8;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nix-flake-inputs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">.</span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;font-style:italic;"> lib</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;font-style:italic;">concatStringsSep</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#BABED8;">\\n</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">ip</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;font-style:italic;"> ip</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;font-style:italic;">outPath</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">lib</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;font-style:italic;">attrValues</span><span style="color:#BABED8;font-style:italic;"> inputs</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">â€‹</a></h2><h3 id="cleaning-up" tabindex="-1">Cleaning up <a class="header-anchor" href="#cleaning-up" aria-label="Permalink to &quot;Cleaning up&quot;">â€‹</a></h3><p>Refer <a href="https://github.com/NixOS/nix/issues/6141" target="_blank" rel="noreferrer">nix#6141</a>, if even after rebooting and garbage collection paths aren&#39;t removed.</p><p>The steps for force removal, in case a path is blocked by a (unlikely to be happen) bug.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">nix-store</span><span style="color:#C3E88D;"> --query</span><span style="color:#C3E88D;"> --referrers</span><span style="color:#BABED8;"> $path </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> xargs</span><span style="color:#C3E88D;"> nix-store</span><span style="color:#C3E88D;"> --delete</span></span>
<span class="line"><span style="color:#FFCB6B;">nix-store</span><span style="color:#C3E88D;"> --query</span><span style="color:#C3E88D;"> --referrers-closure</span><span style="color:#BABED8;"> $path </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> xargs</span><span style="color:#C3E88D;"> nix-store</span><span style="color:#C3E88D;"> --delete</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#C3E88D;"> nix</span><span style="color:#C3E88D;"> store</span><span style="color:#C3E88D;"> delete</span><span style="color:#BABED8;"> $path </span><span style="color:#C3E88D;">--ignore-liveness</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,53)]))}const u=a(t,[["render",o]]);export{m as __pageData,u as default};
