import{_ as p,c,a as l,b as d,t as u,d as m,w as b,e as h,r as t,o,f as y,g}from"./chunks/framework.BIeOwSkr.js";const C="/site/assets/runtime.BDvvmpNf.jpg",k=JSON.parse('{"title":"BinFmt: The hidden secret of runtime execution","description":"A kernel feature that nobody talks about.","frontmatter":{"title":"BinFmt: The hidden secret of runtime execution","description":"A kernel feature that nobody talks about.","created":"2024-10-10 11:40 PM","image":"/blogs/binfmt/cover.jpg","tags":["linux","demystifying","low-level"]},"headers":[],"relativePath":"blogs/binfmt.md","filePath":"blogs/binfmt.md","lastUpdated":1730733276000}'),f={name:"blogs/binfmt.md"},D={id:"frontmatter-title",tabindex:"-1"};function E(a,s,v,w,F,B){const r=t("BlogMetadata"),i=t("ClientOnly");return o(),c("div",null,[l("h1",D,[d(u(a.$frontmatter.title)+" ",1),s[0]||(s[0]=l("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),m(i,null,{default:b(()=>{var n,e;return[(((n=a.$frontmatter)==null?void 0:n.aside)??!0)&&(((e=a.$frontmatter)==null?void 0:e.showArticleMetadata)??!0)?(o(),y(r,{key:0,frontmatter:a.$frontmatter,wordCount:578},null,8,["frontmatter"])):g("",!0)]}),_:1}),s[1]||(s[1]=h('<p>You know how a binary runs? Yes, a runtime (ld-linux)!</p><p><img src="'+C+`" alt="Runtime"></p><p>You know what comes before runtime? Yes, a compilation process!</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> zig</span><span style="color:#C3E88D;"> cc</span><span style="color:#C3E88D;"> -o</span><span style="color:#C3E88D;"> main</span><span style="color:#C3E88D;"> main.c</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>And what about in between? Oh well...</p><h2 id="one-of-most-misunderstood-concept" tabindex="-1">One of most misunderstood concept <a class="header-anchor" href="#one-of-most-misunderstood-concept" aria-label="Permalink to &quot;One of most misunderstood concept&quot;">​</a></h2><p>Back in the days, when I was introduced to docker or somewhere around that time, I got to know about this thing called as binfmt_misc.</p><p>I was trying to make the raspberry pi a personal build server to compile x86 code (somewhat transparently) because I puffed my laptop&#39;s cooling fans (which btw is still puffed, except that I can now compile binaries without heating because I disabled cpu turbo via auto-cpufreq, and really at 100% cpu without fans the laptop just runs fine, never goes beyond 70-72C).</p><p>So, back to where we were, yes, binfmt_misc, this allowed me to run arm compiled binary in my laptop, and x86 binary in raspberry pi. Woah, that&#39;s too much, I know, let&#39;s go back a little and instead of theory, go by a practical example!</p><h2 id="running-arm-binary-transparently-in-x86-cpu" tabindex="-1">Running Arm binary transparently in x86 CPU <a class="header-anchor" href="#running-arm-binary-transparently-in-x86-cpu" aria-label="Permalink to &quot;Running Arm binary transparently in x86 CPU&quot;">​</a></h2><p>Ever wondered if you can do</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./my-favourite-arm-program</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>on your present laptop that&#39;s not arm?</p><p>How cool is it?</p><h3 id="install-and-register-qemu-on-binfmt-misc" tabindex="-1">Install and register qemu on binfmt_misc <a class="header-anchor" href="#install-and-register-qemu-on-binfmt-misc" aria-label="Permalink to &quot;Install and register qemu on binfmt_misc&quot;">​</a></h3><p>I&#39;m surprised the setup is just a set of basic steps, yet docs are so frustratingly bad around it.</p><p>I have automated it in a <a href="https://raw.githubusercontent.com/Animeshz/scripts/refs/heads/main/main/qemu-binfmt" target="_blank" rel="noreferrer">script</a>, you may also read it if you like.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> sudo</span><span style="color:#C3E88D;"> xbps-install</span><span style="color:#C3E88D;"> qemu-user-static</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> wget</span><span style="color:#C3E88D;"> https://github.com/Animeshz/scripts/raw/main/main/qemu-binfmt</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#FFCB6B;"> chmod</span><span style="color:#C3E88D;"> +x</span><span style="color:#C3E88D;"> qemu-binfmt</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./qemu-binfmt</span><span style="color:#C3E88D;"> --register</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This script ad-hoc mounts the <code>binfmt_misc</code> filesystem, for persistence you may wanna add the following to your <code>/etc/fstab</code>.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">none</span><span style="color:#C3E88D;">  /proc/sys/fs/binfmt_misc</span><span style="color:#C3E88D;"> binfmt_misc</span><span style="color:#C3E88D;"> defaults</span><span style="color:#F78C6C;"> 0</span><span style="color:#F78C6C;"> 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="voila-run-non-architectural-binaries" tabindex="-1">Voila, run non-architectural binaries <a class="header-anchor" href="#voila-run-non-architectural-binaries" aria-label="Permalink to &quot;Voila, run non-architectural binaries&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Note: zig cc does not support static linking in *-gnu ABI</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> zig</span><span style="color:#C3E88D;"> cc</span><span style="color:#C3E88D;"> -o</span><span style="color:#C3E88D;"> main</span><span style="color:#C3E88D;"> main.c</span><span style="color:#C3E88D;"> -target</span><span style="color:#C3E88D;"> aarch64-linux-musl</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR aarch64-linux-gnu-gcc -static main.c -o main</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR aarch64-linux-musl-gcc -static main.c -o main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> file</span><span style="color:#C3E88D;"> ./main</span></span>
<span class="line"><span style="color:#FFCB6B;">./main:</span><span style="color:#C3E88D;"> ELF</span><span style="color:#C3E88D;"> 64-bit</span><span style="color:#C3E88D;"> LSB</span><span style="color:#C3E88D;"> executable,</span><span style="color:#C3E88D;"> ARM</span><span style="color:#C3E88D;"> aarch64,</span><span style="color:#C3E88D;"> version</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;"> (SYSV), statically linked, with debug_info, not stripped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./main</span></span>
<span class="line"><span style="color:#FFCB6B;">Hello</span><span style="color:#C3E88D;"> World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="a-note-on-dynamically-linked-binaries" tabindex="-1">A note on dynamically linked binaries <a class="header-anchor" href="#a-note-on-dynamically-linked-binaries" aria-label="Permalink to &quot;A note on dynamically linked binaries&quot;">​</a></h2><p>Without passing <code>-static</code> in gcc, or targeting <code>*-gnu</code> in zig cc compiler, output binary is dynamically linked:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> zig</span><span style="color:#C3E88D;"> cc</span><span style="color:#C3E88D;"> -o</span><span style="color:#C3E88D;"> main</span><span style="color:#C3E88D;"> main.c</span><span style="color:#C3E88D;"> -target</span><span style="color:#C3E88D;"> aarch64-linux-gnu</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR aarch64-linux-gnu-gcc main.c -o main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> file</span><span style="color:#C3E88D;"> ./main</span></span>
<span class="line"><span style="color:#FFCB6B;">./main:</span><span style="color:#C3E88D;"> ELF</span><span style="color:#C3E88D;"> 64-bit</span><span style="color:#C3E88D;"> LSB</span><span style="color:#C3E88D;"> executable,</span><span style="color:#C3E88D;"> ARM</span><span style="color:#C3E88D;"> aarch64,</span><span style="color:#C3E88D;"> version</span><span style="color:#F78C6C;"> 1</span><span style="color:#BABED8;"> (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> GNU/Linux 2.0.0, with debug_info, not stripped</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>You&#39;ll notice it requires interpreter at <code>/lib/ld-linux-aarch64.so.1</code>. And actually most other binaries are generally dynamically linked.</p><p>Running it directly will result in:</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./main</span></span>
<span class="line"><span style="color:#FFCB6B;">qemu-aarch64-static:</span><span style="color:#C3E88D;"> Could</span><span style="color:#C3E88D;"> not</span><span style="color:#C3E88D;"> open</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">/lib/ld-linux-aarch64.so.1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">:</span><span style="color:#C3E88D;"> No</span><span style="color:#C3E88D;"> such</span><span style="color:#C3E88D;"> file</span><span style="color:#C3E88D;"> or</span><span style="color:#C3E88D;"> directory</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>In that case, there are 2 options</p><ul><li>If you have a chroot, run in that (chroot with binfmt works flawlessly).</li><li>Install libc of that architecture separately (see below).</li></ul><p>You&#39;ll need libc for particular architecture and need to pass <code>-L</code> to qemu binary (<code>qemu-aarch64</code>), or with binfmt case, you can just set env variable <code>QEMU_LD_PREFIX</code> while running.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> sudo</span><span style="color:#C3E88D;"> xbps-install</span><span style="color:#C3E88D;"> cross-aarch64-linux-gnu-libc</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> QEMU_LD_PREFIX=/usr/aarch64-linux-gnu</span><span style="color:#C3E88D;"> ./main</span></span>
<span class="line"><span style="color:#FFCB6B;">Hello</span><span style="color:#C3E88D;"> World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="misc-info" tabindex="-1">Misc Info <a class="header-anchor" href="#misc-info" aria-label="Permalink to &quot;Misc Info&quot;">​</a></h2><h3 id="run-jar-directly" tabindex="-1">Run jar directly <a class="header-anchor" href="#run-jar-directly" aria-label="Permalink to &quot;Run jar directly&quot;">​</a></h3><p>You don&#39;t need to type <code>java</code> or <code>java -jar</code> in front of jar files every damn time.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./my-program.jar</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># OR</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> ./MyJava.class</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>is enough!</p><p>See <a href="https://wiki.archlinux.org/title/Binfmt_misc_for_Java" target="_blank" rel="noreferrer">[ArchWiki] Binfmt Misc for Java</a>.</p><h3 id="that-s-also-how-wsl-runs-exe" tabindex="-1">That&#39;s also how WSL runs .exe <a class="header-anchor" href="#that-s-also-how-wsl-runs-exe" aria-label="Permalink to &quot;That&#39;s also how WSL runs .exe&quot;">​</a></h3><p>This is exactly how inside of WSL (Windows Subsystem for Linux), you can execute a windows executable (.exe) from a bash shell, running inside actual emulated linux kernel.</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> clip.exe</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#C3E88D;"> file.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="chrooting-into-raspberry-pi" tabindex="-1">Chrooting into Raspberry Pi <a class="header-anchor" href="#chrooting-into-raspberry-pi" aria-label="Permalink to &quot;Chrooting into Raspberry Pi&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight vp-code" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;"># mount raspberry pi at /mnt/rpi</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> sudo</span><span style="color:#C3E88D;"> mount</span><span style="color:#C3E88D;"> /dev/sda2</span><span style="color:#C3E88D;"> /mnt/rpi</span><span style="color:#C3E88D;"> -o</span><span style="color:#C3E88D;"> rw,uid=</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">id</span><span style="color:#C3E88D;"> -u</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">,gid=</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">id</span><span style="color:#C3E88D;"> -g</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#C3E88D;"> sudo</span><span style="color:#C3E88D;"> chroot</span><span style="color:#C3E88D;"> /mnt/rpi</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>You can perform</p><ul><li>apt update</li><li>install extra packages</li><li>or test/enable a service</li></ul><p>before even booting first time, and what not?</p><h2 id="further-reading" tabindex="-1">Further reading <a class="header-anchor" href="#further-reading" aria-label="Permalink to &quot;Further reading&quot;">​</a></h2><p>Running cross-arch binaries was one usecase, running jars as showed earlier is another, you may make e.g. <code>./screenshot-xxx.jpg</code> launch a image viewer.</p><p>See</p><ul><li><a href="https://docs.kernel.org/admin-guide/binfmt-misc.html" target="_blank" rel="noreferrer">binfmt_misc - Kernel SysAdmin Docs</a></li><li><a href="https://docs.kernel.org/admin-guide/binfmt-misc.html" target="_blank" rel="noreferrer">binfmt_misc - RedHat Docs</a></li><li>Zig made cross-compilation of C/C++ easy (<a href="https://zig.guide/working-with-c/zig-cc" target="_blank" rel="noreferrer">https://zig.guide/working-with-c/zig-cc</a>).</li><li><a href="https://ughe.github.io/2018/07/19/qemu-aarch64" target="_blank" rel="noreferrer">Qemu userspace emulation (debian)</a> - although don&#39;t follow the troubleshooting steps they&#39;re not safe (use <code>QEMU_LD_PREFIX</code> instead).</li></ul><p>Backlinks:</p><ul><li><a href="https://www.reddit.com/r/linux/comments/1g15i3h/binfmt_the_hidden_secret_of_runtime_execution" target="_blank" rel="noreferrer">r/linux</a> | <a href="https://www.reddit.com/r/voidlinux/comments/1g15iio/binfmt_the_hidden_secret_of_runtime_execution" target="_blank" rel="noreferrer">r/voidlinux</a></li><li><a href="https://www.linkedin.com/posts/animeshz_binfmt-the-hidden-secret-of-runtime-execution-activity-7250432617991290880-OsiU" target="_blank" rel="noreferrer">Linkedin</a></li></ul>`,52))])}const _=p(f,[["render",E]]);export{k as __pageData,_ as default};
